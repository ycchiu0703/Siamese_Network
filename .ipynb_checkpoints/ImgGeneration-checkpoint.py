{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "40dd6fdb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn import ensemble, preprocessing, metrics\n",
    "from sklearn.metrics import f1_score\n",
    "from joblib import dump,load\n",
    "from sklearn import model_selection\n",
    "from sklearn.metrics import accuracy_score, precision_recall_fscore_support\n",
    "from sklearn.metrics import recall_score, precision_score\n",
    "import networkx as nx\n",
    "import os\n",
    "import ast\n",
    "import copy\n",
    "\n",
    "syscallCategory = {\n",
    "        'kernel' : ['rt_sigaction', 'uname', 'setgid', 'getpriority', 'time', 'clone', 'restart_syscall', 'sysinfo', 'prlimit64', 'geteuid', 'kill', 'umask', 'getppid', 'set_robust_list', 'setresuid', 'nanosleep', 'rt_sigprocmask', 'prctl', 'times', 'mmap', 'setsid', 'vfork', 'wait4', 'getuid', 'gettid', 'set_tid_address', 'fork', 'rt_sigsuspend', 'setpriority', 'ptrace', 'get_thread_area', 'exit', 'alarm', 'setpgid', 'setresgid', 'set_thread_area', 'sigaltstack', 'getrlimit', 'getpid', 'futex', 'setrlimit', 'getegid', 'tgkill', 'setuid', 'exit_group', 'clock_gettime', 'getgid', 'rt_sigtimedwait', 'setitimer', 'getpgrp', 'gettimeofday','mmap2','ni_syscall','sigreturn','waitpid'],\n",
    "\n",
    "        'fs' : ['stat', 'lseek', 'readlinkat', 'chroot', 'sendfile', 'umount2', 'symlink', 'flock', 'dup2', 'getcwd', 'chdir', 'fstat', 'mount', 'rmdir', 'execve', 'mkdir', 'epoll_wait', 'openat', 'eventfd2', 'readv', 'rename', 'epoll_create1', 'fchmod', 'pipe', 'unlink', 'pipe2', 'fcntl', 'open', 'read', 'write', 'lstat', 'chmod', 'readlink', 'getdents64', 'utimes', 'ioctl', 'select', 'access', 'close', 'poll', 'getdents', 'epoll_ctl', 'ftruncate','_llseek','_newselect','fcntl64','fstat64','llseek','lstat64','renameat2','stat64'],\n",
    "\n",
    "        'net' : ['accept', 'connect', 'sendto', 'shutdown', 'getsockname', 'getpeername', 'listen', 'socketpair', 'socket', 'setsockopt', 'getsockopt', 'recvfrom', 'recvmsg', 'bind','recv','send','sendfile64','socketcall'],\n",
    "\n",
    "        'mm' : ['mprotect', 'brk', 'munmap', 'madvise'],\n",
    "\n",
    "        'ipc' : ['shmdt', 'shmget'],\n",
    "\n",
    "        'printk' : ['syslog'],\n",
    "\n",
    "        'sched' : ['sched_getaffinity'],\n",
    "    \n",
    "        'HighFreq' : ['_newselect','close','connect','fcntl','get_thread_area','getsockopt','open','read','recv','recvfrom','rt_sigaction','rt_sigprocmask','sendto','socket','time'],\n",
    "\n",
    "        'other' : [ 'getegid32','geteuid32','getgid32','getuid32','setgid32','setresuid32','setuid32','sysctl','ugetrlimit']\n",
    "}\n",
    "\n",
    "fam = {\n",
    "    'kernel':0,\n",
    "    'fs':1,\n",
    "    'net':2,\n",
    "    'mm':3,\n",
    "    'ipc':4,\n",
    "    'printk':5,\n",
    "    'sched':6,\n",
    "    'HighFreq':7,\n",
    "    'other':8\n",
    "}\n",
    "\n",
    "def get_key(target):\n",
    "    return_key = []\n",
    "    for key,value in syscallCategory.items():\n",
    "        if target in value:\n",
    "            return_key.append(key)\n",
    "            # return key\n",
    "    if len(return_key) > 0:\n",
    "        return return_key\n",
    "    else:\n",
    "        return ['other']\n",
    "\n",
    "###generate dataset\n",
    "dataset = pd.read_csv(r'./Labels_TimeSyscallSeqs.csv')\n",
    "new_dataset = []\n",
    "cnt_mirai = 0\n",
    "cnt_unknown = 0\n",
    "drop_fam = ['metasploit','zbot','skeeyah','hiddad']\n",
    "drop_index = []\n",
    "dataset = dataset.drop(['CLASS', 'BEH'], axis=1)\n",
    "for i in range(len(dataset)):\n",
    "    if dataset['FAM'][i] == 'mirai':\n",
    "        if cnt_mirai > 50:\n",
    "            drop_index.append(i)\n",
    "        else:\n",
    "            cnt_mirai += 1\n",
    "    elif dataset['FAM'][i] == 'unknown':\n",
    "        if cnt_unknown > 50 :\n",
    "            drop_index.append(i)\n",
    "        else :\n",
    "            cnt_unknown += 1\n",
    "    elif dataset['FAM'][i] in drop_fam:\n",
    "        drop_index.append(i)\n",
    "\n",
    "dataset = dataset.drop(drop_index)\n",
    "dataset = dataset.reset_index(drop = True)\n",
    "\n",
    "label = np.array(dataset[\"FAM\"])\n",
    "\n",
    "\n",
    "#syscall_time_correction\n",
    "syscall_list = []\n",
    "for i in range(len(dataset)):\n",
    "    tmp_syscall = []\n",
    "    tmp = str(dataset[\"SEQUENCE\"][i])\n",
    "    tmp = tmp.replace('-','0')\n",
    "    tmp_seq = ast.literal_eval(tmp)\n",
    "    end_t = float(tmp_seq[len(tmp_seq) - 1][0])\n",
    "    start_t = float(tmp_seq[0][0])\n",
    "\n",
    "    for j in range(len(tmp_seq)):\n",
    "        try:\n",
    "            time = float(tmp_seq[j][0])\n",
    "            time -= start_t\n",
    "            tmp_syscall.append([time,tmp_seq[j][1]])\n",
    "        except:\n",
    "            pass\n",
    "    syscall_list.append(tmp_syscall)\n",
    "    \n",
    "## generate_img(16*9)\n",
    "# 16 time step \n",
    "# 9 class of syscall   \n",
    "column, row = 16, 9\n",
    "imgs = []\n",
    "for i in range(len(syscall_list)):\n",
    "    time_step = np.linspace(0.0,float(syscall_list[i][-1][0]),num=17)\n",
    "    time_step = time_step[1:]\n",
    "    k = 0\n",
    "    step = [[0 for _ in range(row)] for _ in range(column)]\n",
    "    for j in range(len(syscall_list[i])):\n",
    "        if syscall_list[i][j][0] <= time_step[k]:\n",
    "            syscall_fam = get_key(syscall_list[i][j][1])\n",
    "            for h in syscall_fam:\n",
    "                step[k][fam[h]] += 1\n",
    "        else:\n",
    "            k += 1\n",
    "            syscall_fam = get_key(syscall_list[i][j][1])\n",
    "            for h in syscall_fam:\n",
    "                step[k][fam[h]] += 1                        \n",
    "    imgs.append(step)\n",
    "imgs = np.array(imgs)\n",
    "\n",
    "\n",
    "# save imgs and label\n",
    "np.save(\"./img_data.npy\",imgs)\n",
    "np.save(\"./img_label.npy\",label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7410680c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ENV_NAME",
   "language": "python",
   "name": "env_name"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
